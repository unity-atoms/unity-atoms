using System;
<%IF TYPE_HAS_NAMESPACE%>
using {TYPE_NAMESPACE};
<%ENDIF%>

<%IF HAS_SUB_UA_NAMESPACE%>
namespace UnityAtoms.{SUB_UA_NAMESPACE}
<%ELSE%>
namespace UnityAtoms
<%ENDIF%>
{
<%IF EQUATABLE%>
    /// <summary>
    /// Reference of type `{TYPE}`. Inherits from `EquatableAtomReference&lt;{TYPE}, {TYPE_NAME}Constant, {TYPE_NAME}Variable, {TYPE_NAME}Event, {TYPE_NAME}{TYPE_NAME}Event, {TYPE_NAME}{TYPE_NAME}Function, {TYPE_NAME}VariableInstancer&gt;`.
    /// </summary>
    [Serializable]
    public sealed class {TYPE_NAME}Reference : EquatableAtomReference<
        {TYPE},
        {TYPE_NAME}Constant,
        {TYPE_NAME}Variable,
        {TYPE_NAME}Event,
        {TYPE_NAME}{TYPE_NAME}Event,
        {TYPE_NAME}{TYPE_NAME}Function,
        {TYPE_NAME}VariableInstancer>, IEquatable<{TYPE_NAME}Reference>
    {
        public {TYPE_NAME}Reference() : base() { }
        public {TYPE_NAME}Reference({TYPE} value) : base(value) { }
        public bool Equals({TYPE_NAME}Reference other) { return base.Equals(other); }
    }
<%ELSE%>
    /// <summary>
    /// Reference of type `{TYPE}`. Inherits from `AtomReference&lt;{TYPE}, {TYPE_NAME}Constant, {TYPE_NAME}Variable, {TYPE_NAME}Event, {TYPE_NAME}{TYPE_NAME}Event, {TYPE_NAME}{TYPE_NAME}Function, {TYPE_NAME}VariableInstancer&gt;`.
    /// </summary>
    [Serializable]
    public sealed class {TYPE_NAME}Reference : AtomReference<
        {TYPE},
        {TYPE_NAME}Constant,
        {TYPE_NAME}Variable,
        {TYPE_NAME}Event,
        {TYPE_NAME}{TYPE_NAME}Event,
        {TYPE_NAME}{TYPE_NAME}Function,
        {TYPE_NAME}VariableInstancer>, IEquatable<{TYPE_NAME}Reference>
    {
        public {TYPE_NAME}Reference() : base() { }
        public {TYPE_NAME}Reference({TYPE} value) : base(value) { }
        public bool Equals({TYPE_NAME}Reference other) { return base.Equals(other); }
        protected override bool ValueEquals({TYPE} other)
        {
            throw new NotImplementedException();
        } 
    }
<%ENDIF%>
}
